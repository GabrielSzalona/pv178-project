@using TournamentApp.Models
@using TournamentApp.Services
@using TournamentApp.Data
@using Microsoft.EntityFrameworkCore
@inject TournamentService TournamentService
@inject NavigationManager Navigation
@inject AppDbContext DbContext

<div class="top-row ps-3 navbar navbar-dark">
	<div class="container-fluid">
		<a class="navbar-brand" href="">TournamentApp</a>
	</div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
	<nav class="flex-column">
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="" Match="NavLinkMatch.All">
				<span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
			</NavLink>
		</div>

		<div class="nav-item px-3">
			<div>
				<h5 class="text-white">Tournaments</h5>
				@if (tournaments == null)
				{
					<p><em>Loading...</em></p>
				}
				else
				{
					@foreach (var tournament in tournaments)
					{
						<NavLink class="nav-link" href="@($"/tournaments/{tournament.TournamentId}")" Match="NavLinkMatch.All">
							@tournament.Name
						</NavLink>
					}
				}
			</div>
			<a class="nav-link btn btn-primary text-white mt-2" href="/addtournament">Add Tournament</a>
		</div>
	</nav>
</div>

@code {
	private List<Tournament> tournaments;
	private int tournamentId;


	protected override async Task OnInitializedAsync()
	{
		tournaments = await TournamentService.GetTournamentsAsync();
	}

	protected override async Task OnParametersSetAsync()
	{
		await LoadTournaments();
		StateHasChanged();
	}

	private async Task LoadTournaments()
	{
		tournaments = await TournamentService.GetTournamentsAsync();
	}
}
