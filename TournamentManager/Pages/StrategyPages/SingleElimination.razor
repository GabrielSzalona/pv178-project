@using TournamentApp.Models
@using TournamentApp.Data
@using Microsoft.EntityFrameworkCore
@using TournamentApp.Models.GameStrategies

@inject AppDbContext DbContext
@inject NavigationManager Navigation
@inject TournamentService TournamentService

<div class="container mt-5">
    @if (Tournament == null || matches == null || matches.Count == 0)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <main id="tournament" class="tournament-container">
            @for (int round = 1; round <= matches.OrderBy(m => m.Round).ToList().Last().Round; round++)
            {
                <ul class="round round-@round">
                    @foreach (var match in matches.Where(m => m.Round == round))
                    {

                        <li class="spacer">&nbsp;</li>

                        @if (match.IsHidden)
                        {
                            <li class="spacer">&nbsp;</li>
                            <li class="spacer">&nbsp;</li>
                            <li class="spacer">&nbsp;</li>
                            <li class="spacer">&nbsp;</li>
                        }
                        else
                        {
                            <li class="game game-top">
                                @if (match.T1 != null)
                                {
                                    <span class="team-name @GetWinnerClass(match, match.T1)">@match.T1.Name</span>
                                }
                                @if (match.IsWinner)
                                {
                                    <span class="score">@match.Score1</span>
                                }
                            </li>
                            <li class="game game-spacer" @onclick="() => GoToEditMatch(match.MatchId)">&nbsp;</li>
                            <li class="game game-bottom">
                                @if (match.T2 != null)
                                {
                                        <span class="team-name @GetWinnerClass(match, match.T2)">@match.T2.Name</span>
                                }
                                @if (match.IsWinner)
                                {
                                    <span class="score">@match.Score2</span>
                                }
                            </li>
                        }
                    }
                    <li class="spacer">&nbsp;</li>
                </ul>
            }
        </main>

        <div class="mt-4">
            <button class="btn btn-primary" @onclick="GoBack">Back to Tournaments</button>
        </div>

    }

</div>




@code {
    [Parameter]
    public Tournament Tournament { get; set; }
    private bool showSuccessAlert = false;
    private Match lastMatch;
    private List<Match> matches;
    private GameStrategy strategy;
    private bool displayMatch = false;

    protected override async Task OnInitializedAsync()
    {
        strategy = Tournament.GameStrategy;
        matches = Tournament.Matches;
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/tournaments");
    }

    private void ReloadPage()
    {
        Navigation.NavigateTo($"/tournaments/{Tournament.TournamentId}", true);
    }

    private void UpdateMatch(Match m)
    {
        if (m.IsFinal && m.IsWinner)
        {
            showSuccessAlert = true;
        }

        if (m.PrevMatch1 != null && m.PrevMatch1.IsWinner)
        {
            m.T2 = m.PrevMatch1.Winner;
        }
        if (m.PrevMatch2 != null && m.PrevMatch2.IsWinner)
        {
            m.T1 = m.PrevMatch2.Winner;
        }

    }

    private void DisplayMatchPopup(Match match)
    {
        if (!match.IsHidden)
        {
            displayMatch = true;
        }
    }

    private void GoToEditMatch(int matchId)
    {
        Navigation.NavigateTo($"/editmatch/{Tournament.TournamentId}/{matchId}");
    }

    private string GetWinnerClass(Match match, Team team)
    {
        if (match.IsWinner && (match.Winner == team))
        {
            return "winner";
        }
        return string.Empty;
    }

}
