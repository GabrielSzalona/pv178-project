@using TournamentApp.Models
@using TournamentApp.Data
@using Microsoft.EntityFrameworkCore
@using TournamentApp.Models.GameStrategies

@inject AppDbContext DbContext
@inject NavigationManager Navigation
@inject TournamentService TournamentService
@inject Alerts Alerts


@if (Tournament == null || Matches == null || Matches.Count == 0)
{
	<p><em>Loading...</em></p>
}
else
{

	<div class="round-robin-container">
		@foreach (var match in Matches)
		{
			<div class="match-card" @onclick="() => GoToEditMatch(match.MatchId)">
				<div class="match-team">
					<span class="team-name @GetWinnerClass(match, match.T1)">@match.T1.Name</span>
					<span class="team-score">@match.Score1</span>
				</div>
				<div class="match-team">
					<span class="team-name @GetWinnerClass(match, match.T2)">@match.T2.Name</span>
					<span class="team-score">@match.Score2</span>
				</div>
			</div>
		}
	</div>
}


@code {
	[Parameter]
	public Tournament Tournament { get; set; }

	private List<Match> Matches;

	protected override async Task OnInitializedAsync()
	{
		Matches = Tournament.Matches;
	}

	private void GoToEditMatch(int matchId)
	{
		Navigation.NavigateTo($"/editmatch/{Tournament.TournamentId}/{matchId}");
	}

	private string GetWinnerClass(Match match, Team team)
	{
		if (match.IsWinner && (match.Winner == team))
		{
			return "winner";
		}
		return string.Empty;
	}
}
