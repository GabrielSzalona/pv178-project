@page "/tournaments/{tournamentId:int}"
@using TournamentApp.Models
@using TournamentApp.Models.GameStrategies
@using TournamentApp.Data
@using Microsoft.EntityFrameworkCore
@using TournamentApp.Pages.TeamPages
@inject AppDbContext DbContext
@inject NavigationManager Navigation
@inject TournamentService TournamentService
@inject SweetAlertService Swal
@inject Alerts Alerts

<div class="container mt-5">

	@if (tournament == null)
	{
		<div class="text-center">
			<p><em>Loading...</em></p>
		</div>
	}
	else
	{

		<div class="row">
			<div class="col-md-6">

				<TournamentInfo Tournament="tournament" />

				<div class="form-group mb-3">
					<label for="gameStrategy" class="form-label">Game Strategy:</label>
					@if (!tournament.Started)
					{
						<select value="@tournament.GameStrategy.Name" id="gameStrategy" class="form-select" @onchange="UpdateGameStrategy">
							@foreach (var strategyType in TournamentService.strategyRoutes.Keys)
							{
								<option value="@strategyType">@strategyType</option>
							}
						</select>
					}
					else
					{
						<p class="form-control-plaintext">@tournament.GameStrategy.GetType().Name</p>
					}
				</div>

				<button type="submit" class="btn btn-primary" @onclick="SaveTournament">Save</button>
				<button class="btn btn-danger" @onclick="ConfirmDeleteTournament">Delete</button>
				<div class="card mt-3">
					<div class="card-body">
						<h5 class="card-title">Start Tournament</h5>
						<p class="card-text">
							Click the button below to start the tournament. Once started, the teams cannot be edited.
						</p>
						<button class="btn btn-lg btn-success" disabled="@tournament.Started" @onclick="StartTournament">Start</button>
						<button class="btn btn-lg btn-danger" disabled="@(!tournament.Started)" @onclick="ResetTournament">Reset</button>
					</div>
				</div>
			</div>

			<div class="col-md-6">

				<TeamsTable Tournament="tournament" />

				<div class="form-group mb-3">
					<label for="newTeamName" class="form-label">New Team Name:</label>
					<InputText id="newTeamName" class="form-control" @bind-Value="newTeamName" />
				</div>

				<button class="btn btn-success" disabled="@tournament.Started" @onclick="AddTeam">Add Team</button>
			</div>
		</div>

		<div class="mt-4">
			@if (gameStrategyComponentType != null)
			{
				<h3 class="mb-4">Matches</h3>
				<p class="text-muted">Click on a match to edit its results.</p>
				<DynamicComponent Type="gameStrategyComponentType" Parameters="gameStrategyParams" @key="@strategyComponentKey" />
			}
		</div>
	}
</div>

<div class="mt-5 mb-5 mb-5 mb-5 mb-5 mb-5">
</div>



@code {
	[Parameter]
	public int TournamentId { get; set; }
	private Tournament tournament;
	private string prevName;

	private Type gameStrategyComponentType;
	private Dictionary<string, object> gameStrategyParams = new();

	private string newTeamName;

	private string strategyComponentKey = Guid.NewGuid().ToString();

	private void RefreshStrategyComponent()
	{
		strategyComponentKey = Guid.NewGuid().ToString();
	}



	protected override async Task OnInitializedAsync()
	{
		tournament = await TournamentService.GetTournamentByIdAsync(TournamentId);
		prevName = tournament.Name;
		if (!tournament.Started)
		{
			tournament.Matches = tournament.GameStrategy.CreateMatches(tournament.Teams, TournamentId);
		}

		gameStrategyParams = new Dictionary<string, object>()
		{
			{"Tournament", tournament}
		};
		gameStrategyComponentType = TournamentService.strategyRoutes[tournament.GameStrategy.Name];

	}

	private void UpdateStrategyParams()
	{
		gameStrategyParams["Tournament"] = tournament;
	}

	private async Task SaveTournament()
	{
		if (!prevName.Equals(tournament.Name) && await TournamentService.IsDuplicitName(tournament))
		{
			await Alerts.ShowErrorAlert("Duplicate tournament name", "Tournament name already satisfied");
			return;
		}

		await TournamentService.UpdateWithoutMatchesAsync(tournament);
		await Alerts.SuccMsg("Saved");
	}


	private async Task AddTeam()
	{
		if (String.IsNullOrEmpty(newTeamName))
		{
			return;
		}

		tournament.Teams.Add(new Team() { Name = newTeamName });

		await TournamentService.UpdateWithoutMatchesAsync(tournament);

		newTeamName = null;
		UpdateGameStrategy(new ChangeEventArgs() { Value = tournament.GameStrategy.Name});

		RefreshStrategyComponent();

		await Alerts.SuccMsg("Team Added");
	}


	private async Task ShowSavedMessage(string msg)
	{
		await Swal.FireAsync(new SweetAlertOptions
			{
				Position = "top-end",
				Icon = "success",
				Title = msg,
				ShowConfirmButton = false,
				Timer = 1000
			});
	}


	private async Task StartTournament()
	{
		tournament.Started = true;
		tournament.Matches = tournament.GameStrategy.CreateMatches(tournament.Teams, TournamentId);

		await TournamentService.UpdateTournamentAsync(tournament);
		var x = await TournamentService.GetTournamentByIdAsync(TournamentId);

		Navigation.NavigateTo($"/tournaments/{TournamentId}", true);
	}

	private async Task ResetTournament()
	{
		await TournamentService.ResetTournament(tournament);
		Navigation.NavigateTo($"/tournaments/{TournamentId}", true);
	}


	private void GoBack()
	{
		Navigation.NavigateTo("/tournaments", true);
	}


	private async Task ConfirmDeleteTournament()
	{
		var confirmed = await Alerts.ShowConfirmationAlert("Are you sure?", "You won't be able to revert this!");
		if (confirmed)
		{
			await DeleteTournament();
		}
	}

	private async Task DeleteTournament()
	{
		if (tournament != null)
		{
			await TournamentService.DeleteTournamentAsync(TournamentId);
			Navigation.NavigateTo("/tournaments", true);
		}
	}

	private void UpdateGameStrategy(ChangeEventArgs e)
	{
		if ((e.Value is string dropdownValue) && !String.IsNullOrWhiteSpace(dropdownValue))
		{
			gameStrategyComponentType = TournamentService.strategyRoutes[dropdownValue];

			tournament.GameStrategy = (GameStrategy)Activator.CreateInstance(TournamentService.stringToStrategyMap[dropdownValue]);

			tournament.Matches = tournament.GameStrategy.CreateMatches(tournament.Teams, TournamentId);
		}
		else
		{
			gameStrategyComponentType = null;
		}
	}
}
