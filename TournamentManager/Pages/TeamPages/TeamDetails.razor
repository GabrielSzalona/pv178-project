@page "/team/{tournamentId:int}/{teamId:int}"
@inject TournamentService TournamentService

@inject NavigationManager Navigation
@inject Alerts Alerts

@using System.Collections.Generic

@if (tournament != null)
{
	
    <div class="container mt-4">
        <h3>Edit Team Details</h3>

        <div class="form-group">
            <label for="teamName">Team Name:</label>
            <input id="teamName" class="form-control" @bind="team.Name" />
        </div>

        <TeamStatsComponent Wins="@team.Wins" Losses="@team.Losses" Points="team.Points"/>

        <div class="mt-3">
            <h4>Team Members</h4>
            <div class="card">
                <div class="card-body">
                    <ul class="list-group list-group-flush">
                        @foreach (var member in team.Members)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @member
                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveMember(member)">Remove</button>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <div class="input-group mt-3">
                <input placeholder="New member name" class="form-control" @bind="newMemberName" />
                <div class="input-group-append">
                    <button class="btn btn-primary" @onclick="AddMember">Add Member</button>
                </div>
            </div>
        </div>

        <div class="mt-3">
            <button class="btn btn-success" @onclick="SaveChanges">Save Changes</button>
            <button class="btn btn-danger" @onclick="ConfirmDeleteTeam">Delete</button>

        </div>
    </div>

}

@code {

    [Parameter]
    public int TournamentId { get; set; }

    [Parameter]
    public int TeamId { get; set; }

    private Team team;
    private Tournament tournament;


    private string newMemberName;

    protected override async Task OnInitializedAsync()
    {
        tournament = await TournamentService.GetTournamentByIdAsync(TournamentId);
        team = tournament.Teams.Find(t => t.TeamId == TeamId);
    }

    private void AddMember()
    {
        if (!string.IsNullOrWhiteSpace(newMemberName))
        {
            team.Members.Add(newMemberName);
            newMemberName = string.Empty;
        }
    }

    private void RemoveMember(string member)
    {
        team.Members.Remove(member);
    }

    private async Task SaveChanges()
    {
        await TournamentService.UpdateTournamentAsync(tournament);
        Navigation.NavigateTo($"/tournaments/{TournamentId}");
    }


    private async Task ConfirmDeleteTeam()
    {
        var confirmed = await Alerts.ShowConfirmationAlert("Are you sure?", "You won't be able to revert this!");
        if (confirmed)
        {
            await DeleteTeam();
        }
    }

    private async Task DeleteTeam()
    {

        await TournamentService.DeleteTeamAsync(tournament, team);
        Navigation.NavigateTo($"/tournaments/{TournamentId}");

        await Alerts.SuccMsg("Team Deleted");
    }

}