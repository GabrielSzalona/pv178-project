 @page "/editmatch/{tournamentId:int}/{matchId:int}"
@using TournamentApp.Models
@using TournamentApp.Data
@using Microsoft.EntityFrameworkCore
@using TournamentApp.Models.GameStrategies
@inject AppDbContext DbContext
@inject NavigationManager Navigation
@inject TournamentService TournamentService
@inject Alerts Alerts

<h3 class="mb-4">Edit Match</h3>

@if (match == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="card">

		<div class="card-header">
			Edit Winner and Match Results
		</div>
		<div class="card-body">
			@if (match.T1 == null)
			{
				<p>
					No winner of previous match
				</p>
			}
			else
			{
				<div class="form-group">
					<div class="form-check">
						<input class="form-check-input" type="radio" name="winner" id="team1" @onchange="() => match.Winner = match.T1" checked="@IsChecked(match.T1)" />
						<label class="form-check-label" for="team1">@match.T1.Name</label>
						<input type="number" class="form-control score-input" @bind="match.Score1" min="0" />
					</div>
				</div>
			}

			@if (match.T2 == null)
			{
				<p>
					No winner of previous match
				</p>
			}
			else
			{
				<div class="form-group">
					<div class="form-check">
						<input class="form-check-input" type="radio" name="winner" id="team2" @onchange="() => match.Winner = match.T2" checked="@IsChecked(match.T2)" />
						<label class="form-check-label" for="team2">@match.T2.Name</label>
						<input type="number" class="form-control score-input" @bind="match.Score2" min="0" />
					</div>
				</div>
			}

			<div class="form-group mt-3">
				@if (match.T1 != null && match.T2 != null)
				{
				<button class="btn btn-primary" @onclick="SaveResult">Save Result</button>
				}
				<button class="btn btn-secondary" @onclick="GoBack">Cancel</button>
			</div>
		</div>
	</div>

}



@code {

	[Parameter]
	public int TournamentId { get; set; }
	[Parameter]
	public int MatchId { get; set; }
	private Models.Match match;
	private Tournament tournament;

	protected override async Task OnInitializedAsync()
	{
		tournament = await TournamentService.GetTournamentByIdAsync(TournamentId);

		if (!tournament.Started)
		{
			await Alerts.ShowWarningAlert("Tournament hasn't started", "First start the tournament to edit matches");
			Navigation.NavigateTo($"/tournaments/{TournamentId}");
			return;
		}

		match = tournament.Matches.First(m => m.MatchId == MatchId);
	}


	private async Task SaveResult()
	{
		match.IsWinner = true;
		match.AddTeamStats();
		tournament.GameStrategy.UpdateMatches(tournament.Matches);
		await TournamentService.UpdateTournamentAsync(tournament);

		Navigation.NavigateTo($"/tournaments/{match.TourId}");
	}

	private bool IsChecked(Team team)
	{
		return match.Winner == team;
	}

	private void GoBack()
	{
		Navigation.NavigateTo($"/tournaments/{match.TourId}");
	}

}