@page "/addtournament"
@using TournamentApp.Models
@using TournamentApp.Services
@using TournamentApp.Models.GameStrategies
@inject TournamentService TournamentService
@inject NavigationManager Navigation
@inject Alerts Alerts

<div class="container mt-5">
    <div class="card">
        <div class="card-body">
            <h3 class="card-title">Add Tournament</h3>
            <div class="mb-3">
                <label for="tournamentName" class="form-label">Tournament Name</label>
                <input id="tournamentName" class="form-control" @bind="tournamentName" placeholder="Tournament Name" />
            </div>

            <h4 class="card-subtitle mb-2">Teams</h4>
            @foreach (var team in teams)
            {
                <div class="mb-3">
                    <input class="form-control" @bind="team.Name" placeholder="Team Name" />
                </div>
            }
            <button class="btn btn-outline-primary mb-3" @onclick="AddTeam">Add Another Team</button>
            <br />
            <button class="btn btn-success" @onclick="HandleValidSubmit">Save Tournament</button>
        </div>
    </div>


</div>

@code {

    private string tournamentName;
    private List<Team> teams = new List<Team> { new Team() };

    private void AddTeam()
    {
        teams.Add(new Team());
    }

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrWhiteSpace(tournamentName))
        {
            await Alerts.ShowErrorAlert("Empty or tournament name", "");
        }
        else if (teams == null || teams.Any(t => string.IsNullOrWhiteSpace(t.Name)) || teams.Count < 2)
        {
            await Alerts.ShowErrorAlert("Invalid number of teams or Empty team name", "Minimum 2 teams required");
        }
        else if (!IsUniqueTeams(teams))
        {
            await Alerts.ShowErrorAlert("Duplicate teams", "Ensure unique names for teams");
        }
        else
        {
            var tournament = new Tournament { Name = tournamentName, Teams = teams, GameStrategy = new SingleElimination() };
            if (!await TournamentService.AddTournamentAsync(tournament))
            {
                await Alerts.ShowErrorAlert("Duplicate tournament name", "Tournament name already satisfied");
                return;
            }
            Navigation.NavigateTo("/tournaments", true);
        }
    }

    private bool IsUniqueTeams(List<Team> teams)
    {
        return teams.GroupBy(t => t.Name.Trim()).Count() == teams.Count();
    }
}
